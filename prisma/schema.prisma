// Este é o arquivo de esquema Prisma,
// saiba mais sobre ele na documentação: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Status {
  Ativo
  Inativo
  Concluido
  Paralizado
}

// Modelo de Usuário
model User {
  id        Int        @id @default(autoincrement())
  userName  String
  email     String
  password  String
  avatarUrl String?
  active    Boolean
  role      String     @default("Usuário Padrão")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  works     Work[]     @relation("UserWorks") // Relacionamento muitos para muitos com obras
  workUsers WorkUser[]
}

// Modelo de Obra
model Work {
  id              Int            @id @default(autoincrement())
  workDescription String
  company         String
  nameResponsible String
  phoneContact    String
  address         String
  logoUrl         String?
  active          Boolean
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
  services        Service[]
  Team            Team[]
  Shift           Shift[]
  Interference    Interference[]
  Location        Location[]
  Effective       Effective[]
  users           User[]         @relation("UserWorks") // Relacionamento muitos para muitos com usuários
  workUsers       WorkUser[]
}

// Tabela de Associação
model WorkUser {
  id     Int  @id @default(autoincrement()) // ID único da associação
  user   User @relation(fields: [userId], references: [id]) // Referência ao usuário
  userId Int // Chave estrangeira para o ID do usuário
  work   Work @relation(fields: [workId], references: [id]) // Referência à obra
  workId Int // Chave estrangeira para o ID da obra
}

// Modelo de Serviço
model Service {
  id                 Int                @id @default(autoincrement()) // ID único do serviço
  workId             Int // ID da obra associada ao serviço
  work               Work               @relation(fields: [workId], references: [id]) // Relacionamento com a obra
  serviceDescription String // Descrição do serviço
  unit               String // Unidade de medida do serviço
  status             String // Status do serviço
  subcategoryId      Int // ID da subcategoria do serviço
  totalAmount        Int // Total amount do serviço
  subcategory        SubServiceCategory @relation(fields: [subcategoryId], references: [id]) // Relacionamento com a subcategoria do serviço
  createdAt          DateTime           @default(now()) // Data e hora de criação
  updatedAt          DateTime           @default(now()) // Data e hora de atualização
}

// Modelo de Categoria de Serviço
model ServiceCategory {
  id            Int                  @id @default(autoincrement()) // ID único da categoria de serviço
  name          String // Nome da categoria de serviço
  status        String // Status da categoria de serviço
  subcategories SubServiceCategory[] // Relacionamento com subcategorias de serviço
  createdAt     DateTime             @default(now()) // Data e hora de criação
  updatedAt     DateTime             @default(now()) // Data e hora de atualização
}

// Modelo de Subcategoria de Serviço
model SubServiceCategory {
  id                Int             @id @default(autoincrement()) // ID único da subcategoria de serviço
  name              String // Nome da subcategoria de serviço
  status            String // Status da subcategoria de serviço
  serviceCategoryId Int // ID da categoria de serviço à qual a subcategoria pertence
  serviceCategory   ServiceCategory @relation(fields: [serviceCategoryId], references: [id]) // Relacionamento com a categoria de serviço
  services          Service[] // Relacionamento com serviços associados à subcategoria
}

// Modelo de Equipe
model Team {
  id                Int            @id @default(autoincrement()) // ID único da equipe
  workId            Int // ID da obra à qual a equipe está associada
  work              Work           @relation(fields: [workId], references: [id]) // Relacionamento com a obra
  descricaoEquipe   String // Descrição da equipe
  empresaContratada String // Nome da empresa contratada para a equipe
  status            String // Status da Equipe
  Shifts            Shift[] // Relacionamento com os turnos da equipe
  Interferences     Interference[] // Relacionamento com as interferências da equipe
  createdAt         DateTime       @default(now()) // Data e hora de criação
  updatedAt         DateTime       @default(now()) // Data e hora de atualização
}

// Modelo de Turno
model Shift {
  id               Int      @id @default(autoincrement()) // ID único do turno
  teamId           Int // ID da equipe à qual o turno está associado
  team             Team     @relation(fields: [teamId], references: [id]) // Relacionamento com a equipe
  workId           Int // ID da obra à qual o turno está associado
  work             Work     @relation(fields: [workId], references: [id]) // Relacionamento com a obra
  description      String // Descrição do turno
  feasibility      String // Praticabilidade do turno
  weatherCondition String // Condições climáticas do turno
  status           String // Status da Interferência
  createdAt        DateTime @default(now()) // Data e hora de criação
  updatedAt        DateTime @default(now()) // Data e hora de atualização
}

// Modelo de Interferência
model Interference {
  id                      Int      @id @default(autoincrement()) // ID único da interferência
  teamId                  Int // ID da equipe à qual a interferência está associada
  team                    Team     @relation(fields: [teamId], references: [id]) // Relacionamento com a equipe
  workId                  Int // ID da obra à qual a interferência está associada
  work                    Work     @relation(fields: [workId], references: [id]) // Relacionamento com a obra
  interferenceResponsible String // Responsável pela interferência
  category                String // Categoria da interferência
  subCategory             String // Subcategoria da interferência
  status                  String // Status da Interferência
  createdAt               DateTime @default(now()) // Data e hora de criação
  updatedAt               DateTime @default(now()) // Data e hora de atualização
}

// Modelo de Local
model Location {
  id                  Int      @id @default(autoincrement()) // ID único do local
  workId              Int // ID da obra à qual o local está associado
  work                Work     @relation(fields: [workId], references: [id]) // Relacionamento com a obra
  descriptionLocation String // Descrição do local
  responsibleLocation String // Responsável pelo local
  status              String // Status da Interferência
  createdAt           DateTime @default(now()) // Data e hora de criação
  updatedAt           DateTime @default(now()) // Data e hora de atualização
}

// Modelo de Efetivo
model Effective {
  id                   Int      @id @default(autoincrement()) // ID único do efetivo
  workId               Int // ID da obra à qual o efetivo está associado
  work                 Work     @relation(fields: [workId], references: [id]) // Relacionamento com a obra
  type                 String // Tipo de efetivo
  descriptionEffective String // Descrição do efetivo
  status               String // Status da Interferência
  createdAt            DateTime @default(now()) // Data e hora de criação
  updatedAt            DateTime @default(now()) // Data e hora de atualização
}
